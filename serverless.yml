service: ${env:SERVERLESS_PREFIX}
frameworkVersion: "3"
useDotenv: true

custom: 
  client: 
    bucketName: ${env:SERVERLESS_PREFIX}-${opt:stage}
    indexDocument: index.html
    errorDocument: index.html
  prune:
    automatic: true
    number: 3

provider: 
  name: aws
  stage: dev
  region: ap-south-1
  runtime: nodejs18.x
  profile: serverlessProfile
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${env:USERS_TABLE}
    MEDIA_BUCKET: ${env:MEDIA_BUCKET}

functions:
  handler:
    handler: dist/index.handler
    events:
      - httpApi: "*"
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:SERVERLESS_PREFIX}-lambda-role

resources:
  Resources:
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${env:MEDIA_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        AccessControl: AwsExecRead              
    
    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: 'S3Bucket'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''  
                  - - 'arn:aws:s3:::'
                    - Ref: 'S3Bucket'
                    - '/*'
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${env:USERS_TABLE}

plugins:
 - serverless-finch
 - serverless-prune-plugin
 - serverless-dotenv-plugin
 - serverless-offline   